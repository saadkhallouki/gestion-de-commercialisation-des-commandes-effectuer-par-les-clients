#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GestionCommercial
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Vente")]
	public partial class venteDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void Insertarticle(article instance);
    partial void Updatearticle(article instance);
    partial void Deletearticle(article instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void Insertcommande(commande instance);
    partial void Updatecommande(commande instance);
    partial void Deletecommande(commande instance);
    partial void Insertdetail(detail instance);
    partial void Updatedetail(detail instance);
    partial void Deletedetail(detail instance);
    #endregion
		
		public venteDataContext() : 
				base(global::GestionCommercial.Properties.Settings.Default.VenteConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public venteDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public venteDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public venteDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public venteDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<article> article
		{
			get
			{
				return this.GetTable<article>();
			}
		}
		
		public System.Data.Linq.Table<Client> Client
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<commande> commande
		{
			get
			{
				return this.GetTable<commande>();
			}
		}
		
		public System.Data.Linq.Table<detail> detail
		{
			get
			{
				return this.GetTable<detail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.article")]
	public partial class article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _codeart;
		
		private string _desi;
		
		private System.Nullable<decimal> _Pu;
		
		private System.Nullable<int> _Qdipo;
		
		private EntitySet<detail> _detail;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeartChanging(string value);
    partial void OncodeartChanged();
    partial void OndesiChanging(string value);
    partial void OndesiChanged();
    partial void OnPuChanging(System.Nullable<decimal> value);
    partial void OnPuChanged();
    partial void OnQdipoChanging(System.Nullable<int> value);
    partial void OnQdipoChanged();
    #endregion
		
		public article()
		{
			this._detail = new EntitySet<detail>(new Action<detail>(this.attach_detail), new Action<detail>(this.detach_detail));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codeart", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string codeart
		{
			get
			{
				return this._codeart;
			}
			set
			{
				if ((this._codeart != value))
				{
					this.OncodeartChanging(value);
					this.SendPropertyChanging();
					this._codeart = value;
					this.SendPropertyChanged("codeart");
					this.OncodeartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_desi", DbType="VarChar(40)")]
		public string desi
		{
			get
			{
				return this._desi;
			}
			set
			{
				if ((this._desi != value))
				{
					this.OndesiChanging(value);
					this.SendPropertyChanging();
					this._desi = value;
					this.SendPropertyChanged("desi");
					this.OndesiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pu", DbType="Money")]
		public System.Nullable<decimal> Pu
		{
			get
			{
				return this._Pu;
			}
			set
			{
				if ((this._Pu != value))
				{
					this.OnPuChanging(value);
					this.SendPropertyChanging();
					this._Pu = value;
					this.SendPropertyChanged("Pu");
					this.OnPuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qdipo", DbType="Int")]
		public System.Nullable<int> Qdipo
		{
			get
			{
				return this._Qdipo;
			}
			set
			{
				if ((this._Qdipo != value))
				{
					this.OnQdipoChanging(value);
					this.SendPropertyChanging();
					this._Qdipo = value;
					this.SendPropertyChanged("Qdipo");
					this.OnQdipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="article_detail", Storage="_detail", ThisKey="codeart", OtherKey="codeart")]
		public EntitySet<detail> detail
		{
			get
			{
				return this._detail;
			}
			set
			{
				this._detail.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_detail(detail entity)
		{
			this.SendPropertyChanging();
			entity.article = this;
		}
		
		private void detach_detail(detail entity)
		{
			this.SendPropertyChanging();
			entity.article = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _codecl;
		
		private string _nom;
		
		private string _ville;
		
		private EntitySet<commande> _commande;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeclChanging(string value);
    partial void OncodeclChanged();
    partial void OnnomChanging(string value);
    partial void OnnomChanged();
    partial void OnvilleChanging(string value);
    partial void OnvilleChanged();
    #endregion
		
		public Client()
		{
			this._commande = new EntitySet<commande>(new Action<commande>(this.attach_commande), new Action<commande>(this.detach_commande));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codecl", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string codecl
		{
			get
			{
				return this._codecl;
			}
			set
			{
				if ((this._codecl != value))
				{
					this.OncodeclChanging(value);
					this.SendPropertyChanging();
					this._codecl = value;
					this.SendPropertyChanged("codecl");
					this.OncodeclChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nom", DbType="VarChar(40)")]
		public string nom
		{
			get
			{
				return this._nom;
			}
			set
			{
				if ((this._nom != value))
				{
					this.OnnomChanging(value);
					this.SendPropertyChanging();
					this._nom = value;
					this.SendPropertyChanged("nom");
					this.OnnomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ville", DbType="VarChar(40)")]
		public string ville
		{
			get
			{
				return this._ville;
			}
			set
			{
				if ((this._ville != value))
				{
					this.OnvilleChanging(value);
					this.SendPropertyChanging();
					this._ville = value;
					this.SendPropertyChanged("ville");
					this.OnvilleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_commande", Storage="_commande", ThisKey="codecl", OtherKey="codecl")]
		public EntitySet<commande> commande
		{
			get
			{
				return this._commande;
			}
			set
			{
				this._commande.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_commande(commande entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_commande(commande entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.commande")]
	public partial class commande : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _NumCom;
		
		private System.Nullable<System.DateTime> _dateCom;
		
		private string _codecl;
		
		private EntitySet<detail> _detail;
		
		private EntityRef<Client> _Client;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNumComChanging(string value);
    partial void OnNumComChanged();
    partial void OndateComChanging(System.Nullable<System.DateTime> value);
    partial void OndateComChanged();
    partial void OncodeclChanging(string value);
    partial void OncodeclChanged();
    #endregion
		
		public commande()
		{
			this._detail = new EntitySet<detail>(new Action<detail>(this.attach_detail), new Action<detail>(this.detach_detail));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumCom", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string NumCom
		{
			get
			{
				return this._NumCom;
			}
			set
			{
				if ((this._NumCom != value))
				{
					this.OnNumComChanging(value);
					this.SendPropertyChanging();
					this._NumCom = value;
					this.SendPropertyChanged("NumCom");
					this.OnNumComChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCom", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateCom
		{
			get
			{
				return this._dateCom;
			}
			set
			{
				if ((this._dateCom != value))
				{
					this.OndateComChanging(value);
					this.SendPropertyChanging();
					this._dateCom = value;
					this.SendPropertyChanged("dateCom");
					this.OndateComChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codecl", DbType="VarChar(6)")]
		public string codecl
		{
			get
			{
				return this._codecl;
			}
			set
			{
				if ((this._codecl != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodeclChanging(value);
					this.SendPropertyChanging();
					this._codecl = value;
					this.SendPropertyChanged("codecl");
					this.OncodeclChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="commande_detail", Storage="_detail", ThisKey="NumCom", OtherKey="NumCom")]
		public EntitySet<detail> detail
		{
			get
			{
				return this._detail;
			}
			set
			{
				this._detail.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_commande", Storage="_Client", ThisKey="codecl", OtherKey="codecl", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.commande.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.commande.Add(this);
						this._codecl = value.codecl;
					}
					else
					{
						this._codecl = default(string);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_detail(detail entity)
		{
			this.SendPropertyChanging();
			entity.commande = this;
		}
		
		private void detach_detail(detail entity)
		{
			this.SendPropertyChanging();
			entity.commande = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.detail")]
	public partial class detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _NumCom;
		
		private string _codeart;
		
		private System.Nullable<int> _Qte;
		
		private EntityRef<article> _article;
		
		private EntityRef<commande> _commande;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNumComChanging(string value);
    partial void OnNumComChanged();
    partial void OncodeartChanging(string value);
    partial void OncodeartChanged();
    partial void OnQteChanging(System.Nullable<int> value);
    partial void OnQteChanged();
    #endregion
		
		public detail()
		{
			this._article = default(EntityRef<article>);
			this._commande = default(EntityRef<commande>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumCom", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string NumCom
		{
			get
			{
				return this._NumCom;
			}
			set
			{
				if ((this._NumCom != value))
				{
					if (this._commande.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNumComChanging(value);
					this.SendPropertyChanging();
					this._NumCom = value;
					this.SendPropertyChanged("NumCom");
					this.OnNumComChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codeart", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string codeart
		{
			get
			{
				return this._codeart;
			}
			set
			{
				if ((this._codeart != value))
				{
					if (this._article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncodeartChanging(value);
					this.SendPropertyChanging();
					this._codeart = value;
					this.SendPropertyChanged("codeart");
					this.OncodeartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qte", DbType="Int")]
		public System.Nullable<int> Qte
		{
			get
			{
				return this._Qte;
			}
			set
			{
				if ((this._Qte != value))
				{
					this.OnQteChanging(value);
					this.SendPropertyChanging();
					this._Qte = value;
					this.SendPropertyChanged("Qte");
					this.OnQteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="article_detail", Storage="_article", ThisKey="codeart", OtherKey="codeart", IsForeignKey=true)]
		public article article
		{
			get
			{
				return this._article.Entity;
			}
			set
			{
				article previousValue = this._article.Entity;
				if (((previousValue != value) 
							|| (this._article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._article.Entity = null;
						previousValue.detail.Remove(this);
					}
					this._article.Entity = value;
					if ((value != null))
					{
						value.detail.Add(this);
						this._codeart = value.codeart;
					}
					else
					{
						this._codeart = default(string);
					}
					this.SendPropertyChanged("article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="commande_detail", Storage="_commande", ThisKey="NumCom", OtherKey="NumCom", IsForeignKey=true)]
		public commande commande
		{
			get
			{
				return this._commande.Entity;
			}
			set
			{
				commande previousValue = this._commande.Entity;
				if (((previousValue != value) 
							|| (this._commande.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._commande.Entity = null;
						previousValue.detail.Remove(this);
					}
					this._commande.Entity = value;
					if ((value != null))
					{
						value.detail.Add(this);
						this._NumCom = value.NumCom;
					}
					else
					{
						this._NumCom = default(string);
					}
					this.SendPropertyChanged("commande");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
